<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>亿栖云文档 – API 使用示例</title>
    <link>/storage/object-storage/api/practices/</link>
    <description>Recent content in API 使用示例 on 亿栖云文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 25 Nov 2020 10:08:56 +0900</lastBuildDate>
    
	  <atom:link href="/storage/object-storage/api/practices/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Storage: 访问控制</title>
      <link>/storage/object-storage/api/practices/access_control/</link>
      <pubDate>Fri, 28 Feb 2020 10:08:56 +0900</pubDate>
      
      <guid>/storage/object-storage/api/practices/access_control/</guid>
      <description>
        
        
        &lt;p&gt;亿栖云对象存储通过请求中的 &lt;a href=&#34;../signature&#34;&gt;签名验证&lt;/a&gt; 信息来验证用户身份。签名验证中的 Access Key，需要用户事先从 &lt;a href=&#34;/storage/object-storage/api/practices/signature/#%E8%8E%B7%E5%8F%96-access-key&#34;&gt;管理控制台&lt;/a&gt; 申请并配置到应用程序中。没有经过签名的请求亿栖云对象存储称之为匿名用户。本章主要介绍经过亿栖云对象存储验证用户身份之后如何进行权限的控制。&lt;/p&gt;
&lt;p&gt;亿栖云对象存储的访问控制方式有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bucket Policy (Bucket 策略)&lt;/li&gt;
&lt;li&gt;Bucket ACL (Bucket 访问控制列表)&lt;/li&gt;
&lt;li&gt;Bucket CORS (Bucket 的跨域资源共享策略)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存储空间策略bucket-policy&#34;&gt;存储空间策略(Bucket Policy)&lt;/h2&gt;
&lt;p&gt;通过 Bucket Policy，用户可以向其他亿栖云用户赋予亿栖云对象存储相应 Bucket 及其 Object 的访问权限，其语义覆盖 API ACL，Resource ACL。&lt;/p&gt;
&lt;p&gt;Bucket Policy 作为一种访问控制方式，其对亿栖云对象存储资源的访问控制粒度是介于 Bucket ACL 和 Object ACL (尚未推出) 之间的。Bucket Policy 可以细致地指定 API 级别的控制，从而实现 Bucket ACL 和 Object ACL 所不能实现的一些功能，如：&lt;a href=&#34;/storage/object-storage/beat-practices/policy/&#34;&gt;防盗链&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一般情况下通过亿栖云对象存储的 &lt;a href=&#34;/storage/object-storage/manual/console/bucket_manage/access_control/#%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%AD%96%E7%95%A5bucket-policy&#34;&gt;Console 界面&lt;/a&gt; 进行配置即可，也支持通过 &lt;a href=&#34;/storage/object-storage/api/bucket/policy/&#34;&gt;API&lt;/a&gt; 来设置。&lt;/p&gt;
&lt;p&gt;用户可以使用 Bucket Policy 中的 Condition 实现一些条件访问控制，比如防盗链。Condition 的详细介绍请参见 &lt;a href=&#34;../../bucket/policy/put_policy/#condition-%E8%AF%B4%E6%98%8E&#34;&gt;Bucket Policy Condition&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;存储空间访问控制列表bucket-acl&#34;&gt;存储空间访问控制列表(Bucket ACL)&lt;/h2&gt;
&lt;p&gt;Bucket ACL 对于亿栖云对象存储的资源访问控制粒度比起 Bucket Policy 和 Object ACL 要更大一些，使用起来也更加简单。其所授予被授权者的权限列表仅可为 READ (可读)，WRITE (可写)，或 FULL_CONTROL (可读写)。&lt;/p&gt;
&lt;p&gt;Bucket 拥有者默认就拥有该 Bucket 的所有权限。当然，用户可以另外配置 Bucket 的公开读或公开写，即不附带认证信息的匿名访问，也可以针对特定亿栖云用户来配置该 Bucket 的读写权限。&lt;/p&gt;
&lt;p&gt;一般情况下通过亿栖云对象存储的 &lt;a href=&#34;../../../manual/console/bucket_manage/access_control/#%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8bucket-acl&#34;&gt;Console 界面&lt;/a&gt; 进行配置即可，也支持通过 &lt;a href=&#34;../../bucket/acl/&#34;&gt;API&lt;/a&gt; 来设置。&lt;/p&gt;
&lt;h2 id=&#34;权限控制匹配规则&#34;&gt;权限控制匹配规则&lt;/h2&gt;
&lt;p&gt;针对每个请求，Bucket Policy 的优先级高于 Bucket ACL。当某个请求被 Bucket Policy 允许或拒绝时，Bucket ACL 将被忽略；当该请求未被 Bucket Policy 匹配时，亿栖云对象存储服务端将继续检查 Bucket ACL 以确定该请求是否该被执行。&lt;/p&gt;
&lt;p&gt;为了安全考虑，亿栖云对象存储做出如下规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bucket 创建，删除，监控信息等 API 不允许匿名访问。&lt;/li&gt;
&lt;li&gt;删除 Bucket，ACL 以及 Policy 等设置类 API 只允许 Bucket 拥有者自己调用。&lt;/li&gt;
&lt;li&gt;获取 Object 列表默认情况下不允许匿名调用 (无论是否设置公开可读)，需要显式配置 Bucket Policy 指定后才可匿名调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存储空间的跨域资源共享策略bucket-cors&#34;&gt;存储空间的跨域资源共享策略(Bucket CORS)&lt;/h2&gt;
&lt;p&gt;当用户使用 JavaScript AJAX 向亿栖云对象存储发起的请求属于跨源请求时，默认情况下浏览器为了安全考虑，不允许调用不同域名下的资源。因为用户的网站域名跟亿栖云对象存储的域名不一致，这种情况下需要为 Bucket 配置 CORS 规则.&lt;/p&gt;
&lt;p&gt;Bucket CORS 可以对请求来源的域名和请求头进行控制。&lt;/p&gt;
&lt;p&gt;一般情况下通过亿栖云对象存储的 &lt;a href=&#34;../../../manual/console/bucket_manage/access_control/#%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E7%AD%96%E7%95%A5bucket-cors&#34;&gt;Console 界面&lt;/a&gt; 进行配置即可，也支持通过 &lt;a href=&#34;../../bucket/cors/&#34;&gt;API&lt;/a&gt; 来设置。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;h3 id=&#34;匹配规则示例&#34;&gt;匹配规则示例&lt;/h3&gt;
&lt;p&gt;假设用户需将 Bucket 共享给另一个用户，这个用户可以是另一个亿栖云用户，也可以是当前用户创建的子帐号。现对该 Bucket 设置的 Bucket ACL 和 Bucket Policy 规则如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 ACL 为：用户拥有可读写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ACL&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;user-henry&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FULL_CONTROL&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;设置 Policy 为：拒绝用户执行删除 Object 的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bucket_policy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;statement&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deny user-henry deleting object from this bucket&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user-henry&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delete_object&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;effect&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deny&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resource&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mybucket/*&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上所示，即使用户 &lt;code&gt;user-henry&lt;/code&gt; 拥有对 &lt;code&gt;mybucket&lt;/code&gt; 的可读写权限，但是因为 Bucket Policy 禁止该用户删除 &lt;code&gt;mybucket&lt;/code&gt; 下的所有 Object，所以 &lt;code&gt;user-henry&lt;/code&gt; 对 &lt;code&gt;mybucket&lt;/code&gt; 发起的 Object 删除操作都将被拒绝。&lt;/p&gt;
&lt;h3 id=&#34;防盗链白名单示例&#34;&gt;防盗链白名单示例&lt;/h3&gt;
&lt;p&gt;此防盗链规则生效的前提为 Bucket ACL 中未设置公开的读权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bucket_policy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;statement&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;allow example1.com to get object from this bucket&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get_object&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;effect&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;allow&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resource&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mybucket/*&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;condition&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;string_like&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Referer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.example1.com&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;string_not_like&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Referer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.service.example1.com&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;*.example1.com&lt;/code&gt; 为域名白名单。&lt;/p&gt;
&lt;h3 id=&#34;防盗链黑名单示例&#34;&gt;防盗链黑名单示例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bucket_policy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;statement&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deny example2.com getting object&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get_object&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;effect&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deny&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resource&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mybucket/*&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;condition&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;string_like&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Referer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.example2.com&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;*.example2.com&lt;/code&gt; 为域名黑名单。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Storage: 签名验证</title>
      <link>/storage/object-storage/api/practices/signature/</link>
      <pubDate>Fri, 28 Feb 2020 10:08:56 +0900</pubDate>
      
      <guid>/storage/object-storage/api/practices/signature/</guid>
      <description>
        
        
        &lt;p&gt;亿栖云对象存储具备多种访问方式。根据场景的不同，亿栖云对象存储提供了相应的方案来进行请求的身份认证。由于实现签名需要考虑的细节较多，包括语言编码、特殊字符处理、以及新 API 的支持等，所以建议开发者直接使用亿栖云对象存储提供的 SDK 或客户端工具，以减少开发和维护工作。&lt;/p&gt;
&lt;p&gt;若用户的 Bucket 设为私有权限，需要通过请求进行签名；若用户的 Bucket 已经配置为公开读或公开读写权限，则不需要对请求进行签名。&lt;/p&gt;
&lt;h2 id=&#34;签名方式&#34;&gt;签名方式&lt;/h2&gt;
&lt;h3 id=&#34;请求头签名&#34;&gt;请求头签名&lt;/h3&gt;
&lt;p&gt;该方式适用于大部分的场景，如运行在服务器端的应用程序向亿栖云对象存储服务端发起访问请求。应用程序需配置 Access Key。为了防止签名请求被恶意用户拦截重放，从保证用户数据安全的角度出发，亿栖云对象存储设置了 15 分钟之后签名串失效的机制。&lt;/p&gt;
&lt;p&gt;所以，用户需要将系统时间通过 NTP 校准到网络时间。若用户的服务器是运行在 IaaS 平台上的虚拟机，系统会自动同步标准时间。&lt;/p&gt;
&lt;h3 id=&#34;请求参数签名&#34;&gt;请求参数签名&lt;/h3&gt;
&lt;p&gt;该方式支持所有类型的 API 请求，适合在客户端无法设置请求头时使用。其中典型的场景包括：由服务端程序调用 SDK 生成带一定过期时间的参数签名的 URL，显示在网页上作为下载链接。&lt;/p&gt;
&lt;h3 id=&#34;表单签名&#34;&gt;表单签名&lt;/h3&gt;
&lt;p&gt;该方式适用于浏览器直接通过 HTML 表单方式上传小文件。详情请参考 &lt;a href=&#34;../../object/post/&#34;&gt;Post Object API&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;签名服务&#34;&gt;签名服务&lt;/h3&gt;
&lt;p&gt;由于移动端应用的特点，将 Access Key 随 APP 分发会带来安全问题。所以亿栖云对象存储提供了签名服务解决方案，具体请参考 &lt;a href=&#34;../../../beat-practices/app_integration/&#34;&gt;移动 App 接入方案&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;移动客户端每次上传下载文件之前，由亿栖云对象存储服务端验证了用户身份之后，签名服务根据特定的亿栖云 API 调用参数，生成头签名或参数签名，返回给客户端。客户端使用该签名直接跟亿栖云对象存储进行交互。&lt;/p&gt;
&lt;p&gt;适用于Ajax类型应用的 &lt;a href=&#34;/storage/object-storage/sdk/javascript/&#34;&gt;Javascript SDK&lt;/a&gt;、适用 Android 平台的 &lt;a href=&#34;/storage/object-storage/sdk/java/&#34;&gt;Java SDK&lt;/a&gt; 均支持构造 API 请求时应用服务端计算的签名串。&lt;/p&gt;
&lt;p&gt;由于移动客户端经常会遇到系统时间不准确的问题，且签名计算结果跟时间又密切相关，这就需要签名服务在计算签名时把所用的标准时间一并返回给客户端，设置正确的 &lt;code&gt;Date header&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;获取-access-key&#34;&gt;获取 Access Key&lt;/h2&gt;
&lt;p&gt;亿栖云对象存储通过使用对称加密的方法来验证请求者的身份。如果用户以个人身份请求亿栖云对象存储服务时，首先需要拥有一对密钥。密钥包括 &lt;code&gt;Access Key ID&lt;/code&gt; 和 &lt;code&gt;Secret Access Key&lt;/code&gt;，其中 &lt;code&gt;Secret Access Key&lt;/code&gt; 在签名的过程中需要用到。&lt;/p&gt;
&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;获得密钥的用户，可以以密钥拥有者的身份访问亿栖云对象存储，所以密钥中的 Secret Access Key 部分需要对外保密。&lt;/li&gt;
&lt;li&gt;API 密钥下载链接，自创建 10 分钟后失效。用户需及时下载并保存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;操作步骤&#34;&gt;操作步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;登录管理控制台，选择 &lt;strong&gt;产品与服务&lt;/strong&gt; &amp;gt; &lt;strong&gt;访问与授权&lt;/strong&gt; &amp;gt; &lt;strong&gt;API 密钥&lt;/strong&gt;，进入 API 密钥主页面：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/storage/object-storage/_images/ak_sk_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在 API 密钥主页面，点击 &lt;strong&gt;创建&lt;/strong&gt;，按要求输入相关信息后，点击 &lt;strong&gt;提交&lt;/strong&gt; 按钮：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/storage/object-storage/_images/create_access_key.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在随后的对话框中下载密钥文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/storage/object-storage/_images/down_access_key.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;用文本查看 API 密钥信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/storage/object-storage/_images/ak_sk_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，Access Key ID 和 Secret Access Key 分别为：&lt;br&gt;&lt;code&gt;HOKUMWFMUIDFDIWEKLCA&lt;/code&gt; 与 &lt;code&gt;YD0vaP82NQX6R7t0lZVtNtC1JsnkGxgFcXAiwLCN&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;请求头签名示例&#34;&gt;请求头签名示例&lt;/h2&gt;
&lt;p&gt;这里以请求头签名的方式为例加，对签名串的创建过程，进行说明。&lt;/p&gt;
&lt;h3 id=&#34;构建签名串&#34;&gt;构建签名串&lt;/h3&gt;
&lt;p&gt;签名串 (String To Sign) 的总体构成有如下几个部分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plain_text&#34; data-lang=&#34;plain_text&#34;&gt;string_to_sign = Verb + &amp;#34;\n&amp;#34;
              + Content-MD5 + &amp;#34;\n&amp;#34;
              + Content-Type + &amp;#34;\n&amp;#34;
              + Date + &amp;#34;\n&amp;#34;
              (+ Canonicalized Headers + &amp;#34;\n&amp;#34;)
              + Canonicalized Resource
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Verb&lt;/code&gt;：HTTP Method，包括 HEAD，GET，PUT，DELETE，OPTIONS。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-MD5&lt;/code&gt;：请求内容数据的 MD5 值，和请求头里的字段值保持一致，若请求头没有这个参数，保留空白行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt;：请求内容的类型，和请求头里的字段值保持一致，若请求头没有这个参数，保留空白行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt;：此次请求的时间，需要符合 HTTP 规定的 GMT 格式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Canonicalized Headers&lt;/code&gt;：请求头中以 &lt;code&gt;x-qs-&lt;/code&gt; 开头的字段。若该值为空，不保留空白行。构建方式参考 &lt;a href=&#34;#%E6%9E%84%E5%BB%BA-canonicalized-headers&#34;&gt;下文内容&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Canonicalized Resource&lt;/code&gt;：请求访问的资源。构建方式参考 &lt;a href=&#34;#%E6%9E%84%E5%BB%BA-canonicalized-resource&#34;&gt;下文内容&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;签名串示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plain_text&#34; data-lang=&#34;plain_text&#34;&gt;PUT
4gJE4saaMU4BqNR0kLY+lw==
image/jpeg
Wed, 10 Dec 2014 17:20:31 GMT
/mybucket/%28%27this%20is%20test%27%2C%29
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;构建-canonicalized-headers&#34;&gt;构建 Canonicalized Headers&lt;/h3&gt;
&lt;p&gt;下面介绍签名串中 &lt;code&gt;Canonicalized Headers&lt;/code&gt; 和 &lt;code&gt;Canonicalized Resource&lt;/code&gt; 的拼接方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将所有以 &lt;code&gt;x-qs-&lt;/code&gt; (不区分大小写) 为前缀的 HTTP 请求头的名字转换成小写字母。例如 &lt;code&gt;X-QS-Date: Wed, 10 Dec 2014 17:20:31 GMT&lt;/code&gt; 转换成 &lt;code&gt;x-qs-date: Wed, 10 Dec 2014 17:20:31 GMT&lt;/code&gt;。如果某些请求头的值在发出的时候被 URL 编码，那么计算签名时也应当是 URL 编码之后的值。&lt;/li&gt;
&lt;li&gt;将上一步得到的所有 HTTP 请求头按照请求头名字部分的字典升序排列。&lt;/li&gt;
&lt;li&gt;删除请求头和内容之间分隔符两端出现的任何空格。例如 &lt;code&gt;x-qs-date: Wed, 10 Dec 2014 17:20:31 GMT&lt;/code&gt; 转换成 &lt;code&gt;x-qs-date:Wed, 10 Dec 2014 17:20:31 GMT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将所有的头和内容用 &lt;code&gt;\n&lt;/code&gt; 分隔符分隔拼成最后的 Canonicalized Headers。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;含有 Canonicalized Headers 的签名串示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plain_text&#34; data-lang=&#34;plain_text&#34;&gt;PUT
4gJE4saaMU4BqNR0kLY+lw==
image/jpeg

x-qs-copy-source:/mybucket/%E4%B8%AD%E6%96%87
x-qs-copy-source-if-match:%22199389a12492266114933fc428e8cfdc%22
x-qs-date:Wed, 10 Dec 2014 17:20:31 GMT
/mybucket/%28%27this%20is%20test%27%2C%29
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;构建-canonicalized-resource&#34;&gt;构建 Canonicalized Resource&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;若请求 URL 为 Virtual-host 风格，则设置初始字符串为 &lt;code&gt;/&amp;lt;bucket-name&amp;gt;&lt;/code&gt;。若请求 URL 为 Path 风格，则设置初始字符串为空。&lt;/li&gt;
&lt;li&gt;在第1步得到的字符串末尾追加 URI Path。与请求头中的请求字段 &lt;code&gt;path&lt;/code&gt; 一致，即 URI 编码后的值。&lt;/li&gt;
&lt;li&gt;若请求包括子资源，例如 ACL 信息等，那么需将所有的子资源按照字典序从小到大排列，以 &lt;code&gt;&amp;amp;&lt;/code&gt; 拼接生成子资源字符串，并以 &lt;code&gt;?&lt;/code&gt; 开头追加至字符串结尾。&lt;/li&gt;
&lt;li&gt;除了上述子资源以外，形如 &lt;code&gt;response-*&lt;/code&gt; 的参数，如 &lt;a href=&#34;/storage/object-storage/api/object/basic_opt/get/&#34;&gt;GET Object&lt;/a&gt;，也需要按照上述规则拼接至 &lt;code&gt;Canonicalized Resource&lt;/code&gt; 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;全部的子资源包括：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;acl&lt;/li&gt;
&lt;li&gt;append&lt;/li&gt;
&lt;li&gt;cors&lt;/li&gt;
&lt;li&gt;cname&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;li&gt;lifecycle&lt;/li&gt;
&lt;li&gt;mirror&lt;/li&gt;
&lt;li&gt;notification&lt;/li&gt;
&lt;li&gt;policy&lt;/li&gt;
&lt;li&gt;position&lt;/li&gt;
&lt;li&gt;part_number&lt;/li&gt;
&lt;li&gt;replication&lt;/li&gt;
&lt;li&gt;stats&lt;/li&gt;
&lt;li&gt;uploads&lt;/li&gt;
&lt;li&gt;upload_id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过上面步骤得到的 &lt;code&gt;Canonicalized Resource&lt;/code&gt;，应该类似于：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;List Objects：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plain_text&#34; data-lang=&#34;plain_text&#34;&gt;/mybucket/ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;不含子资源的请求：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plain_text&#34; data-lang=&#34;plain_text&#34;&gt;/mybucket/photo.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;包含子资源的请求：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plain_text&#34; data-lang=&#34;plain_text&#34;&gt;/mybucket/movie.mov?uploads
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;包含多个子资源的请求：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plain_text&#34; data-lang=&#34;plain_text&#34;&gt;/mybucket/movie.mov?part_number=3&amp;amp;upload_id=dbb3d762975711e6b457525441715ab4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;无论 URL 为 Virtual-host 风格或是 Path 风格，最终得到的签名字符串是一致的。&lt;/p&gt;
&lt;h3 id=&#34;计算签名-signature&#34;&gt;计算签名 Signature&lt;/h3&gt;
&lt;p&gt;假设经过前文步骤得到的签名串为 &lt;code&gt;string_to_sign&lt;/code&gt;，接下来的步骤是对签名串进行签名。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将 API 密钥的私钥 &lt;code&gt;secret_access_key&lt;/code&gt; 作为 Key，使用 Hmac sha256 算法给签名串生成签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hmac
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hashlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sha256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hmac&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(secret_access_key, digestmod&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sha256)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(string_to_sign)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将签名进行 Base64 编码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;signature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest())&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;添加签名-authorization&#34;&gt;添加签名 Authorization&lt;/h3&gt;
&lt;p&gt;添加 HTTP 请求头:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Authorization: QS &amp;lt;access_key_id&amp;gt;:&amp;lt;signature&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请求头示例:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Authorization: QS PLLZOBTTZXGBNOWUFHZZ:tuXu/KcggHWPAfEmraUHDwEUdiIPSXVRsO+T2rxomBQ=
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;针对-javascript-客户端的特殊考虑&#34;&gt;针对 JavaScript 客户端的特殊考虑&lt;/h2&gt;
&lt;p&gt;由于在浏览器环境中，&lt;code&gt;Date&lt;/code&gt; 字段是被保护的不能设置，所以 JavaScript SDK 在签名时需要将 &lt;code&gt;Date&lt;/code&gt; 头字段留空，并且设置 &lt;code&gt;x-qs-date&lt;/code&gt; 头字段。以下是一个 JavaScript 客户端的示例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET /
HOST: js-sdk-test.jn2.is.yiqiyun.com
x-qs-date:  Fri, 04 May 2018 16:37:00 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;签名串 (string_to_sign)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET

application/octet-stream

x-qs-date:Fri, 04 May 2018 16:37:00 GMT
/js-sdk-test
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;请求参数签名示例&#34;&gt;请求参数签名示例&lt;/h2&gt;
&lt;p&gt;在一些使用场景中可能不便于设置请求头，比如使用浏览器重定向请求，或者给其它用户分享下载链接。亿栖云对象存储允许使用请求参数签名的方式，替代请求头签名。&lt;/p&gt;
&lt;p&gt;需要注意的是，该方式需要设定请求过期时间 &lt;code&gt;expires&lt;/code&gt; 参数。在过期时间之后到达的请求将被亿栖云对象存储拒绝。&lt;/p&gt;
&lt;p&gt;请求参数签名的方式不需要在 HTTP 请求头中附加任何内容，只需在请求参数中添加以下三项 &lt;strong&gt;必要参数&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;access_key_id&lt;/td&gt;
&lt;td&gt;在管理控制台申请的 Access Key ID&lt;/td&gt;
&lt;td&gt;PLLZOBTTZXGBNOWUFHZZ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expires&lt;/td&gt;
&lt;td&gt;签名过期时间，该时间为 Unix Time (也称为 Epoch Time)，表示方法是自历元 &lt;code&gt;1970-01-01 00:00，The Epoch&lt;/code&gt; 之后的秒数，类型为整数。&lt;/td&gt;
&lt;td&gt;1479107162&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signature&lt;/td&gt;
&lt;td&gt;签名串 &lt;code&gt;string_to_sign&lt;/code&gt; 经过 HMAC-SHA256 加密后，再使用 Base64 编码，最后使用 URI 编码后的结果&lt;/td&gt;
&lt;td&gt;tuXu/KcggHWPAfEmraUHDwEUdiIPSXVRsO%2BT2rxomBQ%3D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;构建签名串：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相比于请求头签名方法，签名串 &lt;code&gt;string_to_sign&lt;/code&gt; 的生成过程只有一点不同，需把 &lt;code&gt;Date&lt;/code&gt; 替换为 &lt;code&gt;Expires&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plain_text&#34; data-lang=&#34;plain_text&#34;&gt;string_to_sign = Verb + &amp;#34;\n&amp;#34;
              + Content-MD5 + &amp;#34;\n&amp;#34;
              + Content-Type + &amp;#34;\n&amp;#34;
              + Expires + &amp;#34;\n&amp;#34;
              (+ Canonicalized Headers + &amp;#34;\n&amp;#34;)
              + Canonicalized Resource
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;计算签名：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过上述方法得到签名串 &lt;code&gt;string_to_sign&lt;/code&gt; 以后计算 &lt;code&gt;signature&lt;/code&gt;。需注意的是，&lt;code&gt;signature&lt;/code&gt; 必须进行 URI 编码，比如加号 &lt;code&gt;+&lt;/code&gt; 要被编码成 &lt;code&gt;%2B&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hmac
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urllib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hashlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sha256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hmac&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(secret_access_key, digestmod&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sha256)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(string_to_sign)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;signature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; urllib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quote(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest())&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;拼接请求参数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将以上计算得出的字符串，拼接成请求参数，追加到请求地址的后面：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plain_text&#34; data-lang=&#34;plain_text&#34;&gt;access_key_id=PLLZOBTTZXGBNOWUFHZZ&amp;amp;expires=1479107162&amp;amp;signature=tuXu/KcggHWPAfEmraUHDwEUdiIPSXVRsO%2BT2rxomBQ%3D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;请求示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最终发出去的请求示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET /music.mp3?access_key_id=PLLZOBTTZXGBNOWUFHZZ&amp;amp;expires=1479107162&amp;amp;signature=tuXu/KcggHWPAfEmraUHDwEUdiIPSXVRsO%2BT2rxomBQ%3D
Host: mybucket.jn2.is.yiqiyun.com
Date: Mon, 14 Nov 2016 14:05:00 GMT
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
  </channel>
</rss>
